#!/usr/bin/env ruby

require "logger"
require "time"

require "rubygems"
require "haml"
require "nanoc3"
require "sinatra"
require "nokogiri"

LOCAL_SERVER_NAME = `hostname`.strip + ":4567"

configure do
  LOGGER = Logger.new(STDOUT)

  Dir.chdir(File.join(File.dirname(__FILE__), "..")) do
    BLOG_SITE = Nanoc3::Site.new('.')
  end

  BLOG_SITE.load_data
  LOGGER.debug("Compiling nanoc3 site...")
  BLOG_SITE.compiler.run
  LOGGER.debug("nanoc3 compilation completed")

  set :static
  set :public, File.join(File.dirname(__FILE__), "..", "output")
  set :views, File.join(File.dirname(__FILE__), "..", "server", "views")
end

helpers do
  def logger
    LOGGER
  end

  def parse_parameters(xml)
    xml.xpath('/methodCall/params/param/value').map do |param|
      actual = param.children.find {|x| x.name != "text"}
      puts "type=#{actual.name}"
      case actual.name
      when "string"
        param.content.strip
      when "int"
        param.content.strip.to_i
      end
      # other types to handle: array, base64, boolean, date/time,
      # double, struct, nil (see http://en.wikipedia.org/wiki/XML-RPC)
    end
  end
end

get "/" do
  # %link{ :rel => "EditURI", :type => "application/rsd+xml", :title => "RSD", :href => "http://com/xmlrpc.php?rsd" }
  html = File.read(File.join(settings.public, "index.html"))
  # TODO: figure out our listener port dynamically
  html.sub("</head>", 
           %Q[<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://#{LOCAL_SERVER_NAME}/xmlrpc.php?rsd" />
<link rel="pingback" href="http://#{LOCAL_SERVER_NAME}/xmlrpc.php" /></head>]).gsub('alexvollmer.com', LOCAL_SERVER_NAME)
end

get "/xmlrpc.php" do
  haml :rsd
end

post "/xmlrpc.php" do
  xml = Nokogiri::XML.parse(request.body)
  method_call = xml.xpath("/methodCall/methodName").to_a[0].content
  api_name, method = method_call.split('.')
  logger.debug("api_name=#{api_name} method=#{method}")
  case api_name
  when "mt"
    case method
    when "supportedTextFilters", "getPostCategories"
      haml :empty
    end
  when "metaWeblog"
    case method
    when "getPost"
      post_id, username, password = parse_parameters(xml)
      post = BLOG_SITE.articles.find {|x| x.path == post_id}
      haml :metaweblog_get_post, :locals => {:post => post}
    when "getRecentPosts"
      blog_id, username, password, max_posts = parse_parameters(xml)
      haml :metaweblog_get_recent_posts, :locals => { :max_posts => max_posts }
    end
  when "wp"
    case method
    when "getCategories"
      haml :wp_get_categories
    when "getPages"
      haml :wp_get_pages
    end
  else
    # TODO: then what?
  end
end

