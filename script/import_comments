#!/usr/bin/env ruby

require "rubygems"
require "disqus"
require "disqus/api"
require "disqus/forum"
require "disqus/thread"
require "nanoc3"

require "sequel"

class Disqus::Api
  class << self
    alias_method :old_post, :post
    def post(path, *args)
      unless path =~ /\/$/
        path = "#{path}/"
      end
      old_post(path, *args)
    end

    # original version would "raise" the given Hash. WTF??!
    def update_thread(opts = {})
      JSON.parse(post('update_thread',
                      :forum_api_key  => opts[:forum_api_key],
                      :thread_id      => opts[:thread_id],
                      :title          => opts[:title],
                      :slug           => opts[:slug],
                      :url            => opts[:url],
                      :allow_comments => opts[:allow_comments])
                 )
    end
  end
end

def get_comments(db, post_id)
  db[:wp_comments].where(:comment_post_ID => post_id,
                         :comment_approved => 1).map do |c|
    {
      :id     => c[:id],
      :author => c[:comment_author].to_s,
      :body   => c[:comment_content].to_s,
      :url    => c[:comment_author_url].to_s,
      :email  => c[:comment_author_email].to_s,
      :date   => c[:comment_date_gmt]
    }
  end
end

def post_date(datetime)
  # 2009-03-30T15:41
  datetime.utc.strftime('%Y-%m-%dT%H:%M')
end

def post_map
  site = Nanoc3::Site.new(File.join(File.dirname(__FILE__), ".."))
  site.load_data
  Hash[*site.articles.map { |a| [a.title, a.identifier] }.flatten]
end

db = Sequel.mysql("wordpress")

dataset = db[:wp_posts].
  where(:post_status => "publish",
        :post_type => "post").
  order(:ID)

Disqus::defaults[:api_key] = "UePGFAkhiTbJELXX1CO1j1SpPoA59H61RT74xvlBa3OC1ErM755mjUbz7WxHtChg"

blog = Disqus::Forum.list.find { |f| f.shortname == "alexvollmersite" }

posts = post_map
dataset.each do |post|
  comments = get_comments(db, post[:ID])
  unless comments.empty?
    puts "-" * 80
    uri = post_map[post[:post_title]]
    if uri.nil?
      STDERR.puts "No URI for '#{post[:post_title]}"
      next
    end

    permalink = "http://alexvollmer.com#{uri}"
    puts "Comments for #{permalink}:"

    t = Disqus::Api.thread_by_identifier(:forum_api_key => blog.key,
                                         :title => post[:post_title],
                                         :identifier => permalink)

    puts t.inspect
    if t["message"]["created"] == false
      STDERR.puts "Thread already exists, moving on"
      next
    end

    # TODO: this doesn't appear to be updating the thread's URL
    Disqus::Api.update_thread(:forum_api_key => blog.key,
                              :thread_id => t["message"]["thread"]["id"],
                              :url => permalink)

    # print "Created comments for #{permalink} "
    comments.each do |comment|
      puts "    #{comment[:email]} -- #{comment[:body][0..50]}"
      puts Disqus::Api.create_post(:forum_api_key => blog.key,
                                   :thread_id => t["message"]["thread"]["id"],
                                   :message => comment[:body],
                                   :author_name => comment[:author],
                                   :author_email => comment[:email],
                                   :created_at => post_date(comment[:date]),
                                   :author_url => comment[:url]).inspect
      # print "."
    end
    # puts ""
  end
end
